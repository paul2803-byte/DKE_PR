@prefix sh:	<http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ex: <http://www.w3.org/2022/example#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix state: <http://www.dke.uni-linz.ac.at/pr-dke/state#> .
@prefix collision: <http://www.dke.uni-linz.ac.at/pr-dke/collision#> .
@prefix flight: <http://www.dke.uni-linz.ac.at/pr-dke/flight#> .
@prefix timeStamp: <http://www.dke.uni-linz.ac.at/pr-dke/timeStamp#> .
@prefix property: <http://www.dke.uni-linz.ac.at/pr-dke/property#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix aircraft: <http://www.dke.uni-linz.ac.at/pr-dke/aircraft#> .

ex:CollisionShape a sh:NodeShape ;
    sh:targetClass ex:State ;
    sh:rule [
        a sh:SPARQLRule ;
        sh:prefixes ex:, rdf:, property:, aircraft: ;
        sh:construct """
            PREFIX ex: <http://www.w3.org/2022/example#>
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX property: <http://www.dke.uni-linz.ac.at/pr-dke/property#>
            PREFIX collision: <http://www.dke.uni-linz.ac.at/pr-dke/collision#>
            PREFIX math: <http://www.w3.org/2005/xpath-functions/math#>
            PREFIX aircraft: <http://www.dke.uni-linz.ac.at/pr-dke/aircraft#>
            CONSTRUCT {
                 ?var
                     rdf:type ex:Collision ;
                     property:aircraft1 ?aircraft1;
                     property:aircraft2 ?aircraft2;
                     property:distance ?distanceMeter ;
                     property:time ?time ;
                     property:converging ?converging .
            }
            WHERE {
                 $this a ex:State ;
                     property:latitude ?lat1 ;
                     property:longitude ?long1 ;
                     property:icao ?icao1 ;
                     property:onGround ?onGround1 .
                 ?otherState a ex:State ;
                     property:latitude ?lat2 ;
                     property:longitude ?long2 ;
                     property:icao ?icao2 ;
                     property:onGround ?onGround2 .
                 ?timeStamp a ex:TimeStamp ;
                     property:time ?time .
                 FILTER( ex:close(?icao1, ?icao2, ?lat1, ?lat2, ?long1, ?long2, ?onGround1, ?onGround2) )
                 BIND( (($lat1 - $lat2) * ($lat1 - $lat2) + ($long1 - $long2) * ($long1 - $long2)) AS ?distance )
                 BIND( math:sqrt(?distance) / 0.008 AS ?distanceMeter )
                 BIND( uri(concat(str(aircraft:), str(?icao1))) AS ?aircraft1 )
                 BIND( uri(concat(str(aircraft:), str(?icao2))) AS ?aircraft2 )
                 BIND( ex:development(?aircraft1, ?aircraft2, ?distanceMeter) AS ?converging )
                 BIND( uri(concat(str(collision:), str(?icao1), str(?icao2), str(?time))) AS ?var )

            }
        """
    ] ;
.

ex:development a sh:SPARQLFunction ;
    rdfs:comment "Check whether two flights are moving toward or away from each other" ;
    sh:returnType xsd:boolean ;
    sh:parameter [
        sh:path ex:aircraft1 ;
        sh:datatype ex:Aircraft ;
    ] ;
    sh:parameter [
        sh:path ex:aircraft2 ;
        sh:datatype ex:Aircraft ;
    ] ;
    sh:parameter [
        sh:path ex:distance ;
        sh:datatype xsd:double ;
    ] ;
    sh:select """
        PREFIX ex: <http://www.w3.org/2022/example#>
        PREFIX property: <http://www.dke.uni-linz.ac.at/pr-dke/property#>
        PREFIX fn: <http://www.w3.org/2005/xpath-functions#>
        SELECT (
            ?dist > $distance AS ?result
        )
        WHERE {
            ?collision a ex:Collision ;
                property:distance ?dist ;
                property:aircraft1 ?first ;
                property:aircraft2 ?second .
            FILTER (
                (?first = $aircraft1 && ?second = $aircraft2 ) ||
                (?second = $aircraft1 && ?first = $aircraft2 )
            )
        }
    """ .

ex:close a sh:SPARQLFunction ;
    rdfs:comment "Check whether two flights are close to each other" ;
    sh:returnType xsd:boolean ;
    sh:parameter [
        sh:path ex:icao1 ;
        sh:datatype xsd:string ;
    ] ;
    sh:parameter [
        sh:path ex:icao2 ;
        sh:datatype xsd:string ;
    ] ;
    sh:parameter [
        sh:path ex:lat1 ;
        sh:datatype xsd:double ;
    ] ;
    sh:parameter [
        sh:path ex:lat2 ;
        sh:datatype xsd:double ;
    ] ;
    sh:parameter [
        sh:path ex:long1 ;
        sh:datatype xsd:double ;
    ] ;
    sh:parameter [
        sh:path ex:long2 ;
        sh:datatype xsd:double ;
    ] ;
    sh:parameter [
        sh:path ex:onGround1 ;
        sh:datatype xsd:boolean ;
    ] ;
    sh:parameter [
        sh:path ex:onGround2 ;
        sh:datatype xsd:boolean ;
    ] ;
    sh:select """
        PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
        SELECT (
            $icao1 > $icao2
            && $onGround1 != "true"
            && $onGround2 != "true"
            && isNumeric($lat1)
            && isNumeric($lat2)
            && isNumeric($long1)
            && isNumeric($long2)
            && (($lat1 - $lat2) * ($lat1 - $lat2)
               + ($long1 - $long2) * ($long1 - $long2))
               < 0.0256 AS ?result
        )
        WHERE {}
    """ .